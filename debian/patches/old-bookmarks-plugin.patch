From: Alberto Garcia <berto@igalia.com>
Subject: Bookmarks plugin from 0.2.12, which doesn't depend on libgom
Forwarded: not-needed
Index: grilo-plugins/src/bookmarks/Makefile.am
===================================================================
--- grilo-plugins.orig/src/bookmarks/Makefile.am
+++ grilo-plugins/src/bookmarks/Makefile.am
@@ -22,11 +22,7 @@ libgrlbookmarks_la_LDFLAGS = \
 	-module		     \
 	-avoid-version
 
-libgrlbookmarks_la_SOURCES =		\
-	grl-bookmarks.c			\
-	grl-bookmarks.h			\
-	bookmarks-resource.c		\
-	bookmarks-resource.h
+libgrlbookmarks_la_SOURCES = grl-bookmarks.c grl-bookmarks.h
 
 extdir				= $(GRL_PLUGINS_DIR)
 bookmarksxmldir	= $(GRL_PLUGINS_DIR)
Index: grilo-plugins/src/bookmarks/grl-bookmarks.c
===================================================================
--- grilo-plugins.orig/src/bookmarks/grl-bookmarks.c
+++ grilo-plugins/src/bookmarks/grl-bookmarks.c
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2010, 2011 Igalia S.L.
- * Copyright (C) 2014 Bastien Nocera <hadess@hadess.net>
  *
  * Contact: Iago Toral Quiroga <itoral@igalia.com>
  *
@@ -29,14 +28,14 @@
 #include <glib/gstdio.h>
 #include <glib/gi18n-lib.h>
 #include <grilo.h>
+#include <sqlite3.h>
 #include <string.h>
 #include <stdlib.h>
 
 #include "grl-bookmarks.h"
-#include "bookmarks-resource.h"
 
-#define GRL_BOOKMARKS_GET_PRIVATE(object)                         \
-  (G_TYPE_INSTANCE_GET_PRIVATE((object),                         \
+#define GRL_BOOKMARKS_GET_PRIVATE(object)			 \
+  (G_TYPE_INSTANCE_GET_PRIVATE((object),			 \
                                GRL_BOOKMARKS_SOURCE_TYPE,        \
                                GrlBookmarksPrivate))
 
@@ -51,14 +50,67 @@ GRL_LOG_DOMAIN_STATIC(bookmarks_log_doma
 
 #define GRL_SQL_DB "grl-bookmarks.db"
 
-#define GRL_SQL_REMOVE_ORPHAN                        \
-  "DELETE FROM bookmarks "                        \
-  "WHERE id in ( "                                \
-  "  SELECT DISTINCT id FROM bookmarks "        \
-  "  WHERE parent NOT IN ( "                        \
-  "    SELECT DISTINCT id FROM bookmarks) "        \
+#define GRL_SQL_CREATE_TABLE_BOOKMARKS			 \
+  "CREATE TABLE IF NOT EXISTS bookmarks ("		 \
+  "id     INTEGER PRIMARY KEY AUTOINCREMENT,"		 \
+  "parent INTEGER REFERENCES bookmarks (id),"		 \
+  "type   INTEGER,"					 \
+  "url    TEXT,"					 \
+  "title  TEXT,"					 \
+  "date   TEXT,"					 \
+  "mime   TEXT,"					 \
+  "desc   TEXT)"
+
+#define GRL_SQL_GET_BOOKMARKS_BY_PARENT			\
+  "SELECT b1.*, count(b2.parent <> '') "		\
+  "FROM bookmarks b1 LEFT OUTER JOIN bookmarks b2 "	\
+  "  ON b1.id = b2.parent "				\
+  "WHERE b1.parent='%s' "				\
+  "GROUP BY b1.id "					\
+  "LIMIT %u OFFSET %u"
+
+#define GRL_SQL_GET_BOOKMARK_BY_ID			\
+  "SELECT b1.*, count(b2.parent <> '') "		\
+  "FROM bookmarks b1 LEFT OUTER JOIN bookmarks b2 "	\
+  "  ON b1.id = b2.parent "				\
+  "WHERE b1.id='%s' "					\
+  "GROUP BY b1.id "					\
+  "LIMIT 1"
+
+#define GRL_SQL_STORE_BOOKMARK				  \
+  "INSERT INTO bookmarks "				  \
+  "(parent, type, url, title, date, mime, desc) "	  \
+  "VALUES (?, ?, ?, ?, ?, ?, ?)"
+
+#define GRL_SQL_REMOVE_BOOKMARK			\
+  "DELETE FROM bookmarks "			\
+  "WHERE id='%s' or parent='%s'"
+
+#define GRL_SQL_REMOVE_ORPHAN			\
+  "DELETE FROM bookmarks "			\
+  "WHERE id in ( "				\
+  "  SELECT DISTINCT id FROM bookmarks "	\
+  "  WHERE parent NOT IN ( "			\
+  "    SELECT DISTINCT id FROM bookmarks) "	\
   "  and parent <> 0)"
 
+#define GRL_SQL_GET_BOOKMARKS_BY_TEXT				\
+  "SELECT b1.*, count(b2.parent <> '') "			\
+  "FROM bookmarks b1 LEFT OUTER JOIN bookmarks b2 "		\
+  "  ON b1.id = b2.parent "					\
+  "WHERE (b1.title LIKE '%%%s%%' OR b1.desc LIKE '%%%s%%') "	\
+  "  AND b1.type = 1 "                                          \
+  "GROUP BY b1.id "						\
+  "LIMIT %u OFFSET %u"
+
+#define GRL_SQL_GET_BOOKMARKS_BY_QUERY				\
+  "SELECT b1.*, count(b2.parent <> '') "			\
+  "FROM bookmarks b1 LEFT OUTER JOIN bookmarks b2 "		\
+  "  ON b1.id = b2.parent "					\
+  "WHERE %s "							\
+  "GROUP BY b1.id "						\
+  "LIMIT %u OFFSET %u"
+
 /* --- Plugin information --- */
 
 #define PLUGIN_ID   BOOKMARKS_PLUGIN_ID
@@ -74,9 +126,20 @@ enum {
   BOOKMARK_TYPE_STREAM,
 };
 
+enum {
+  BOOKMARK_ID = 0,
+  BOOKMARK_PARENT,
+  BOOKMARK_TYPE,
+  BOOKMARK_URL,
+  BOOKMARK_TITLE,
+  BOOKMARK_DATE,
+  BOOKMARK_MIME,
+  BOOKMARK_DESC,
+  BOOKMARK_CHILDCOUNT
+};
+
 struct _GrlBookmarksPrivate {
-  GomAdapter *adapter;
-  GomRepository *repository;
+  sqlite3 *db;
   gboolean notify_changes;
 };
 
@@ -86,9 +149,9 @@ typedef struct {
   const gchar *media_id;
   guint skip;
   guint count;
-  GrlTypeFilter type_filter;
   GrlSourceResultCb callback;
   guint error_code;
+  gboolean is_query;
   gpointer user_data;
 } OperationSpec;
 
@@ -97,7 +160,6 @@ static GrlBookmarksSource *grl_bookmarks
 static void grl_bookmarks_source_finalize (GObject *plugin);
 
 static const GList *grl_bookmarks_source_supported_keys (GrlSource *source);
-static GrlCaps *grl_bookmarks_source_get_caps (GrlSource *source, GrlSupportedOps operation);
 static GrlSupportedOps grl_bookmarks_source_supported_operations (GrlSource *source);
 
 static void grl_bookmarks_source_search (GrlSource *source,
@@ -126,6 +188,7 @@ static gboolean grl_bookmarks_source_not
                             GrlPlugin *plugin,
                             GList *configs)
  {
+   GParamSpec *spec;
    GRL_LOG_DOMAIN_INIT (bookmarks_log_domain, "bookmarks");
 
    GRL_DEBUG ("grl_bookmarks_plugin_init");
@@ -134,6 +197,25 @@ static gboolean grl_bookmarks_source_not
    bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
    bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
 
+   spec = g_param_spec_boxed ("bookmark-date",
+                              "Bookmark date",
+                              "When the media was bookmarked",
+                              G_TYPE_DATE_TIME,
+                              G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE),
+   GRL_BOOKMARKS_KEY_BOOKMARK_TIME =
+       grl_registry_register_metadata_key (registry, spec, NULL);
+   /* If key was not registered, could be that it is already registered. If so,
+      check if type is the expected one, and reuse it */
+   if (GRL_BOOKMARKS_KEY_BOOKMARK_TIME == GRL_METADATA_KEY_INVALID) {
+     g_param_spec_unref (spec);
+     GRL_BOOKMARKS_KEY_BOOKMARK_TIME =
+         grl_registry_lookup_metadata_key (registry, "bookmark-date");
+     if (grl_metadata_key_get_type (GRL_BOOKMARKS_KEY_BOOKMARK_TIME)
+         != G_TYPE_DATE_TIME) {
+       GRL_BOOKMARKS_KEY_BOOKMARK_TIME = GRL_METADATA_KEY_INVALID;
+     }
+   }
+
    GrlBookmarksSource *source = grl_bookmarks_source_new ();
    grl_registry_register_source (registry,
                                  plugin,
@@ -142,36 +224,9 @@ static gboolean grl_bookmarks_source_not
    return TRUE;
  }
 
-static void
-grl_bookmarks_plugin_register_keys (GrlRegistry *registry,
-                                    GrlPlugin   *plugin)
-{
-  GParamSpec *spec;
-
-  spec = g_param_spec_boxed ("bookmark-date",
-                             "Bookmark date",
-                             "When the media was bookmarked",
-                             G_TYPE_DATE_TIME,
-                             G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE),
-  GRL_BOOKMARKS_KEY_BOOKMARK_TIME =
-      grl_registry_register_metadata_key (registry, spec, NULL);
-  /* If key was not registered, could be that it is already registered. If so,
-     check if type is the expected one, and reuse it */
-  if (GRL_BOOKMARKS_KEY_BOOKMARK_TIME == GRL_METADATA_KEY_INVALID) {
-    g_param_spec_unref (spec);
-    GRL_BOOKMARKS_KEY_BOOKMARK_TIME =
-        grl_registry_lookup_metadata_key (registry, "bookmark-date");
-    if (grl_metadata_key_get_type (GRL_BOOKMARKS_KEY_BOOKMARK_TIME)
-        != G_TYPE_DATE_TIME) {
-      GRL_BOOKMARKS_KEY_BOOKMARK_TIME = GRL_METADATA_KEY_INVALID;
-    }
-  }
-}
-
- GRL_PLUGIN_REGISTER_FULL (grl_bookmarks_plugin_init,
-                           NULL,
-                           grl_bookmarks_plugin_register_keys,
-                           PLUGIN_ID);
+ GRL_PLUGIN_REGISTER (grl_bookmarks_plugin_init,
+                      NULL,
+                      PLUGIN_ID);
 
  /* ================== Bookmarks GObject ================ */
 
@@ -196,7 +251,6 @@ grl_bookmarks_plugin_register_keys (GrlR
 
    source_class->supported_operations = grl_bookmarks_source_supported_operations;
    source_class->supported_keys = grl_bookmarks_source_supported_keys;
-   source_class->get_caps = grl_bookmarks_source_get_caps;
    source_class->browse = grl_bookmarks_source_browse;
    source_class->search = grl_bookmarks_source_search;
    source_class->query = grl_bookmarks_source_query;
@@ -210,52 +264,52 @@ grl_bookmarks_plugin_register_keys (GrlR
 }
 
 static void
-migrate_cb (GObject      *object,
-            GAsyncResult *result,
-            gpointer      user_data)
-{
-   gboolean ret;
-   GError *error = NULL;
-
-   ret = gom_repository_migrate_finish (GOM_REPOSITORY (object), result, &error);
-   if (!ret) {
-     GRL_WARNING ("Failed to migrate database: %s", error->message);
-     g_error_free (error);
-   }
-}
-
-static void
 grl_bookmarks_source_init (GrlBookmarksSource *source)
 {
-  GError *error = NULL;
+  gint r;
   gchar *path;
   gchar *db_path;
-  GList *object_types;
+  gchar *sql_error = NULL;
 
   source->priv = GRL_BOOKMARKS_GET_PRIVATE (source);
 
-  path = g_build_filename (g_get_user_data_dir (), "grilo-plugins", NULL);
+  path = g_strconcat (g_get_user_data_dir (),
+                      G_DIR_SEPARATOR_S, "grilo-plugins",
+                      NULL);
 
   if (!g_file_test (path, G_FILE_TEST_IS_DIR)) {
     g_mkdir_with_parents (path, 0775);
   }
 
   GRL_DEBUG ("Opening database connection...");
-  db_path = g_build_filename (path, GRL_SQL_DB, NULL);
+  db_path = g_strconcat (path, G_DIR_SEPARATOR_S, GRL_SQL_DB, NULL);
+  r = sqlite3_open (db_path, &source->priv->db);
   g_free (path);
+  g_free (db_path);
 
-  source->priv->adapter = gom_adapter_new ();
-  if (!gom_adapter_open_sync (source->priv->adapter, db_path, &error)) {
-    GRL_WARNING ("Could not open database '%s': %s", db_path, error->message);
-    g_error_free (error);
-    g_free (db_path);
+  if (r) {
+    g_critical ("Failed to open database '%s': %s",
+		db_path, sqlite3_errmsg (source->priv->db));
+    sqlite3_close (source->priv->db);
     return;
   }
-  g_free (db_path);
+  GRL_DEBUG ("  OK");
 
-  source->priv->repository = gom_repository_new (source->priv->adapter);
-  object_types = g_list_prepend(NULL, GINT_TO_POINTER(BOOKMARKS_TYPE_RESOURCE));
-  gom_repository_automatic_migrate_async (source->priv->repository, 2, object_types, migrate_cb, source);
+  GRL_DEBUG ("Checking database tables...");
+  r = sqlite3_exec (source->priv->db, GRL_SQL_CREATE_TABLE_BOOKMARKS,
+		    NULL, NULL, &sql_error);
+
+  if (r) {
+    if (sql_error) {
+      GRL_WARNING ("Failed to create database tables: %s", sql_error);
+      g_clear_pointer (&sql_error, (GDestroyNotify) sqlite3_free);
+    } else {
+      GRL_WARNING ("Failed to create database tables.");
+    }
+    sqlite3_close (source->priv->db);
+    return;
+  }
+  GRL_DEBUG ("  OK");
 }
 
 G_DEFINE_TYPE (GrlBookmarksSource, grl_bookmarks_source, GRL_TYPE_SOURCE);
@@ -269,12 +323,7 @@ grl_bookmarks_source_finalize (GObject *
 
   source = GRL_BOOKMARKS_SOURCE (object);
 
-  g_clear_object (&source->priv->repository);
-
-  if (source->priv->adapter) {
-    gom_adapter_close_sync (source->priv->adapter, NULL);
-    g_clear_object (&source->priv->adapter);
-  }
+  sqlite3_close (source->priv->db);
 
   G_OBJECT_CLASS (grl_bookmarks_source_parent_class)->finalize (object);
 }
@@ -300,60 +349,46 @@ mime_is_image (const gchar *mime)
 }
 
 static GrlMedia *
-build_media_from_resource (GrlMedia      *content,
-                           GomResource   *resource,
-                           GrlTypeFilter  type_filter)
+build_media_from_stmt (GrlMedia *content, sqlite3_stmt *sql_stmt)
 {
   GrlMedia *media = NULL;
-  gint64 id;
-  gchar *str_id;
+  gchar *id;
   gchar *title;
   gchar *url;
   gchar *desc;
   gchar *date;
   gchar *mime;
-  gchar *thumb;
   guint type;
+  guint childcount;
 
   if (content) {
     media = content;
   }
 
-  g_object_get (resource,
-                  "id", &id,
-                  "title", &title,
-                  "url", &url,
-                  "desc", &desc,
-                  "date", &date,
-                  "mime", &mime,
-                  "type", &type,
-                  "thumbnail-url", &thumb,
-                  NULL);
+  id = (gchar *) sqlite3_column_text (sql_stmt, BOOKMARK_ID);
+  title = (gchar *) sqlite3_column_text (sql_stmt, BOOKMARK_TITLE);
+  url = (gchar *) sqlite3_column_text (sql_stmt, BOOKMARK_URL);
+  desc = (gchar *) sqlite3_column_text (sql_stmt, BOOKMARK_DESC);
+  date = (gchar *) sqlite3_column_text (sql_stmt, BOOKMARK_DATE);
+  mime = (gchar *) sqlite3_column_text (sql_stmt, BOOKMARK_MIME);
+  type = (guint) sqlite3_column_int (sql_stmt, BOOKMARK_TYPE);
+  childcount = (guint) sqlite3_column_int (sql_stmt, BOOKMARK_CHILDCOUNT);
 
   if (!media) {
     if (type == BOOKMARK_TYPE_CATEGORY) {
       media = GRL_MEDIA (grl_media_box_new ());
     } else if (mime_is_audio (mime)) {
-      if (type_filter & GRL_TYPE_FILTER_AUDIO)
-        media = GRL_MEDIA (grl_media_new ());
+      media = GRL_MEDIA (grl_media_new ());
     } else if (mime_is_video (mime)) {
-      if (type_filter & GRL_TYPE_FILTER_VIDEO)
-        media = GRL_MEDIA (grl_media_new ());
+      media = GRL_MEDIA (grl_media_new ());
     } else if (mime_is_image (mime)) {
-      if (type_filter & GRL_TYPE_FILTER_IMAGE)
-        media = GRL_MEDIA (grl_media_image_new ());
+      media = GRL_MEDIA (grl_media_image_new ());
     } else {
-      if (type_filter != GRL_TYPE_FILTER_NONE)
-        media = GRL_MEDIA (grl_media_new ());
+      media = GRL_MEDIA (grl_media_new ());
     }
   }
 
-  if (!media)
-    return NULL;
-
-  str_id = g_strdup_printf ("%" G_GINT64_FORMAT, id);
-  grl_media_set_id (media, str_id);
-  g_free (str_id);
+  grl_media_set_id (media, id);
   grl_media_set_title (media, title);
   if (url) {
     grl_media_set_url (media, url);
@@ -372,36 +407,28 @@ build_media_from_resource (GrlMedia
     }
   }
 
-  if (thumb) {
-    grl_media_set_thumbnail (media, thumb);
+  if (type == BOOKMARK_TYPE_CATEGORY) {
+    grl_media_box_set_childcount (GRL_MEDIA_BOX (media), childcount);
   }
 
-  g_free (title);
-  g_free (url);
-  g_free (desc);
-  g_free (date);
-  g_free (mime);
-  g_free (thumb);
-
   return media;
 }
 
 static void
 bookmark_resolve (GrlSourceResolveSpec *rs)
 {
-  GomRepository *repository;
-  GValue value = { 0, };
-  GomFilter *filter;
-  GomResource *resource;
+  gint r;
+  sqlite3_stmt *sql_stmt = NULL;
+  sqlite3 *db;
   GError *error = NULL;
-  gint64 id;
-  GrlTypeFilter type_filter;
+  gchar *sql;
+  const gchar *id;
 
   GRL_DEBUG (__FUNCTION__);
 
-  repository = GRL_BOOKMARKS_SOURCE (rs->source)->priv->repository;
+  db = GRL_BOOKMARKS_SOURCE (rs->source)->priv->db;
 
-  id = g_ascii_strtoll (grl_media_get_id (rs->media), NULL, 0);
+  id = grl_media_get_id (rs->media);
   if (!id) {
     /* Root category: special case */
     grl_media_set_title (rs->media, GRL_ROOT_TITLE);
@@ -409,199 +436,143 @@ bookmark_resolve (GrlSourceResolveSpec *
     return;
   }
 
-  g_value_init (&value, G_TYPE_INT64);
-  g_value_set_int64 (&value, id);
-  filter = gom_filter_new_eq (BOOKMARKS_TYPE_RESOURCE, "id", &value);
-  g_value_unset (&value);
-  resource = gom_repository_find_one_sync (repository,
-                                           BOOKMARKS_TYPE_RESOURCE,
-                                           filter,
-                                           &error);
-  g_object_unref (filter);
+  sql = g_strdup_printf (GRL_SQL_GET_BOOKMARK_BY_ID, id);
+  GRL_DEBUG ("%s", sql);
+  r = sqlite3_prepare_v2 (db, sql, strlen (sql), &sql_stmt, NULL);
+  g_free (sql);
 
-  if (!resource) {
-    GRL_WARNING ("Failed to get bookmark: %s", error->message);
+  if (r != SQLITE_OK) {
+    GRL_WARNING ("Failed to get bookmark: %s", sqlite3_errmsg (db));
+    error = g_error_new_literal (GRL_CORE_ERROR,
+                                 GRL_CORE_ERROR_RESOLVE_FAILED,
+                                 _("Failed to get bookmark metadata"));
+    rs->callback (rs->source, rs->operation_id, rs->media, rs->user_data, error);
     g_error_free (error);
+    return;
+  }
 
+  while ((r = sqlite3_step (sql_stmt)) == SQLITE_BUSY);
+
+  if (r == SQLITE_ROW) {
+    build_media_from_stmt (rs->media, sql_stmt);
+    rs->callback (rs->source, rs->operation_id, rs->media, rs->user_data, NULL);
+  } else {
+    GRL_WARNING ("Failed to get bookmark: %s", sqlite3_errmsg (db));
     error = g_error_new_literal (GRL_CORE_ERROR,
                                  GRL_CORE_ERROR_RESOLVE_FAILED,
                                  _("Failed to get bookmark metadata"));
     rs->callback (rs->source, rs->operation_id, rs->media, rs->user_data, error);
     g_error_free (error);
-    return;
   }
 
-  type_filter = grl_operation_options_get_type_filter (rs->options);
-  build_media_from_resource (rs->media, resource, type_filter);
-  g_object_unref (resource);
-  rs->callback (rs->source, rs->operation_id, rs->media, rs->user_data, NULL);
+  sqlite3_finalize (sql_stmt);
 }
 
 static void
-find_cb (GObject      *object,
-         GAsyncResult *res,
-         gpointer      user_data)
+produce_bookmarks_from_sql (OperationSpec *os, const gchar *sql)
 {
-  GomResourceGroup *group;
-  OperationSpec *os = user_data;
-  GError *local_error = NULL;
+  gint r;
+  sqlite3_stmt *sql_stmt = NULL;
+  sqlite3 *db;
+  GrlMedia *media;
   GError *error = NULL;
-  guint idx, count, num_left;
+  GList *medias = NULL;
+  guint count = 0;
+  GList *iter;
+
+  GRL_DEBUG ("produce_bookmarks_from_sql");
+
+  GRL_DEBUG ("%s", sql);
+  db = GRL_BOOKMARKS_SOURCE (os->source)->priv->db;
+  r = sqlite3_prepare_v2 (db, sql, strlen (sql), &sql_stmt, NULL);
 
-  group = gom_repository_find_finish (GOM_REPOSITORY (object),
-                                      res,
-                                      &local_error);
-  if (!group) {
-    GRL_WARNING ("Failed to find bookmarks: %s", local_error->message);
+  if (r != SQLITE_OK) {
+    GRL_WARNING ("Failed to retrieve bookmarks: %s", sqlite3_errmsg (db));
     error = g_error_new (GRL_CORE_ERROR,
                          os->error_code,
-                         _("Failed to find bookmarks: %s"), local_error->message);
-    g_error_free (local_error);
+                         _("Failed to get bookmarks list: %s"),
+                         sqlite3_errmsg (db));
     os->callback (os->source, os->operation_id, NULL, 0, os->user_data, error);
     g_error_free (error);
-    goto out;
+    goto free_resources;
   }
 
-  count = gom_resource_group_get_count (group);
-  if (os->skip >= count) {
-    os->callback (os->source, os->operation_id, NULL, 0, os->user_data, NULL);
-    goto out;
+  while ((r = sqlite3_step (sql_stmt)) == SQLITE_BUSY);
+
+  while (r == SQLITE_ROW) {
+    media = build_media_from_stmt (NULL, sql_stmt);
+    medias = g_list_prepend (medias, media);
+    count++;
+    r = sqlite3_step (sql_stmt);
   }
 
-  if (!gom_resource_group_fetch_sync (group, os->skip, os->count, &local_error)) {
-    GRL_WARNING ("Failed to find bookmarks: %s", local_error->message);
+  if (r != SQLITE_DONE) {
+    GRL_WARNING ("Failed to retrieve bookmarks: %s", sqlite3_errmsg (db));
     error = g_error_new (GRL_CORE_ERROR,
                          os->error_code,
-                         _("Failed to find bookmarks: %s"), local_error->message);
-    g_error_free (local_error);
+                         _("Failed to get bookmarks list: %s"),
+                         sqlite3_errmsg (db));
     os->callback (os->source, os->operation_id, NULL, 0, os->user_data, error);
     g_error_free (error);
-    goto out;
+    goto free_resources;
   }
 
-  num_left = MIN (count - os->skip, os->count);
-  for (idx = os->skip; num_left > 0 ; idx++) {
-    GomResource *resource;
-    GrlMedia *media;
-
-    resource = gom_resource_group_get_index (group, idx);
-    media = build_media_from_resource (NULL, resource, os->type_filter);
-    if (media == NULL) {
-      num_left--;
-      if (num_left == 0)
-        os->callback (os->source, os->operation_id, NULL, 0, os->user_data, NULL);
-      continue;
+  if (count > 0) {
+    medias = g_list_reverse (medias);
+    iter = medias;
+    while (iter) {
+      media = GRL_MEDIA (iter->data);
+      os->callback (os->source,
+		    os->operation_id,
+		    media,
+		    --count,
+		    os->user_data,
+		    NULL);
+      iter = g_list_next (iter);
     }
-    os->callback (os->source,
-                  os->operation_id,
-                  media,
-                  --num_left,
-                  os->user_data,
-                  NULL);
+    g_list_free (medias);
+  } else {
+    os->callback (os->source, os->operation_id, NULL, 0, os->user_data, NULL);
   }
 
-  g_object_unref (group);
-
-out:
-  g_slice_free (OperationSpec, os);
-}
-
-static void
-produce_bookmarks_from_filter (OperationSpec *os,
-                               GomFilter     *filter)
-{
-  GomRepository *repository;
-
-  GRL_DEBUG ("produce_bookmarks_from_filter");
-
-  repository = GRL_BOOKMARKS_SOURCE (os->source)->priv->repository;
-  gom_repository_find_async (repository,
-                             BOOKMARKS_TYPE_RESOURCE,
-                             filter,
-                             find_cb,
-                             os);
+ free_resources:
+  g_clear_pointer (&sql_stmt, (GDestroyNotify) sqlite3_finalize);
 }
 
 static void
-produce_bookmarks_from_category (OperationSpec *os, const gchar *category_id)
+produce_bookmarks_by_query (OperationSpec *os, const gchar *query)
 {
-  GomFilter *filter;
-  GValue value = { 0, };
-  int parent_id;
-
-  GRL_DEBUG ("produce_bookmarks_from_category");
-  parent_id = atoi (category_id);
-
-  g_value_init (&value, G_TYPE_INT64);
-  g_value_set_int64 (&value, parent_id);
-  filter = gom_filter_new_eq (BOOKMARKS_TYPE_RESOURCE, "parent", &value);
-  g_value_unset (&value);
-
-  produce_bookmarks_from_filter (os, filter);
-  g_object_unref (filter);
+  gchar *sql;
+  GRL_DEBUG ("produce_bookmarks_by_query");
+  sql = g_strdup_printf (GRL_SQL_GET_BOOKMARKS_BY_QUERY,
+			 query, os->count, os->skip);
+  produce_bookmarks_from_sql (os, sql);
+  g_free (sql);
 }
 
 static void
-produce_bookmarks_from_query (OperationSpec *os, const gchar *query)
+produce_bookmarks_by_text (OperationSpec *os, const gchar *text)
 {
-  GomFilter *filter;
-  GArray *array;
-
-  GRL_DEBUG ("produce_bookmarks_from_query");
-
-  array = g_array_new(FALSE, FALSE, sizeof(GValue));
-  filter = gom_filter_new_sql (query, array);
-  g_array_unref (array);
-  produce_bookmarks_from_filter (os, filter);
-  g_object_unref (filter);
-}
-
-static GomFilter *
-substr_filter (const char *column,
-               const char *text)
-{
-  GValue value = { 0, };
-  GomFilter *filter;
-  char *str;
-
-  g_value_init (&value, G_TYPE_STRING);
-  str = g_strdup_printf ("%%%s%%", text);
-  g_value_set_string (&value, str);
-  g_free (str);
-
-  filter = gom_filter_new_like (BOOKMARKS_TYPE_RESOURCE, column, &value);
-  g_value_unset (&value);
-
-  return filter;
+  gchar *sql;
+  GRL_DEBUG ("produce_bookmarks_by_text");
+  sql = g_strdup_printf (GRL_SQL_GET_BOOKMARKS_BY_TEXT,
+			 text? text: "",
+                         text? text: "",
+                         os->count,
+                         os->skip);
+  produce_bookmarks_from_sql (os, sql);
+  g_free (sql);
 }
 
 static void
-produce_bookmarks_from_text (OperationSpec *os, const gchar *text)
+produce_bookmarks_from_category (OperationSpec *os, const gchar *category_id)
 {
-  GomFilter *like1, *like2, *likes, *type1, *filter;
-  GValue value = { 0, };
-
-  GRL_DEBUG ("produce_bookmarks_from_text");
-
-  /* WHERE (title LIKE '%text%' OR desc LIKE '%text%') AND type == BOOKMARKS_TYPE_STREAM */
-
-  like1 = substr_filter ("title", text);
-  like2 = substr_filter ("desc", text);
-  likes = gom_filter_new_or (like1, like2);
-  g_object_unref (like1);
-  g_object_unref (like2);
-
-  g_value_init (&value, G_TYPE_INT);
-  g_value_set_int (&value, BOOKMARKS_TYPE_STREAM);
-  type1 = gom_filter_new_eq (BOOKMARKS_TYPE_RESOURCE, "type", &value);
-  g_value_unset (&value);
-
-  filter = gom_filter_new_and (likes, type1);
-  g_object_unref (likes);
-  g_object_unref (type1);
-
-  produce_bookmarks_from_filter (os, filter);
-  g_object_unref (filter);
+  gchar *sql;
+  GRL_DEBUG ("produce_bookmarks_from_category");
+  sql = g_strdup_printf (GRL_SQL_GET_BOOKMARKS_BY_PARENT,
+			 category_id, os->count, os->skip);
+  produce_bookmarks_from_sql (os, sql);
+  g_free (sql);
 }
 
 static void
@@ -610,28 +581,33 @@ remove_bookmark (GrlBookmarksSource *boo
                  GrlMedia *media,
                  GError **error)
 {
-  GomResource *resource;
-  gint64 id;
-  GError *local_error = NULL;
+  gint r;
+  gchar *sql_error;
+  gchar *sql;
 
   GRL_DEBUG ("remove_bookmark");
 
-  id = g_ascii_strtoll (bookmark_id, NULL, 0);
-  resource = g_object_new (BOOKMARKS_TYPE_RESOURCE, "id", id,
-                           "repository", bookmarks_source->priv->repository,
-                           NULL);
-  if (!gom_resource_delete_sync (resource, &local_error)) {
-    GRL_WARNING ("Failed to remove bookmark '%s': %s", bookmark_id, local_error->message);
+  sql = g_strdup_printf (GRL_SQL_REMOVE_BOOKMARK, bookmark_id, bookmark_id);
+  GRL_DEBUG ("%s", sql);
+  r = sqlite3_exec (bookmarks_source->priv->db, sql, NULL, NULL, &sql_error);
+  g_free (sql);
+
+  if (r != SQLITE_OK) {
+    GRL_WARNING ("Failed to remove bookmark '%s': %s", bookmark_id, sql_error);
     *error = g_error_new (GRL_CORE_ERROR,
                           GRL_CORE_ERROR_REMOVE_FAILED,
                           _("Failed to remove: %s"),
-                          local_error->message);
-    g_error_free (local_error);
+                          sql_error);
+    sqlite3_free (sql_error);
   }
 
-  g_object_unref (resource);
+  /* Remove orphan nodes from database */
+  GRL_DEBUG ("%s", GRL_SQL_REMOVE_ORPHAN);
+  sqlite3_exec (bookmarks_source->priv->db,
+                GRL_SQL_REMOVE_ORPHAN,
+                NULL, NULL, NULL);
 
-  if (*error != NULL && bookmarks_source->priv->notify_changes) {
+  if (bookmarks_source->priv->notify_changes) {
     /* We can improve accuracy computing the parent container of removed
        element */
     grl_source_notify_change (GRL_SOURCE (bookmarks_source),
@@ -641,31 +617,6 @@ remove_bookmark (GrlBookmarksSource *boo
   }
 }
 
-static GomResource *
-find_resource (const gchar   *id,
-	       GomRepository *repository)
-{
-  GomResource *resource;
-  GomFilter *filter;
-  GValue value = { 0, };
-
-  if (id == NULL)
-    return NULL;
-
-  g_value_init(&value, G_TYPE_INT64);
-  g_value_set_int64 (&value, g_ascii_strtoll (id, NULL, 0));
-  filter = gom_filter_new_eq (BOOKMARKS_TYPE_RESOURCE, "id", &value);
-  g_value_unset(&value);
-
-  resource = gom_repository_find_one_sync (repository,
-                                           BOOKMARKS_TYPE_RESOURCE,
-                                           filter,
-                                           NULL);
-  g_object_unref (filter);
-
-  return resource;
-}
-
 static void
 store_bookmark (GrlBookmarksSource *bookmarks_source,
                 GList **keylist,
@@ -673,39 +624,49 @@ store_bookmark (GrlBookmarksSource *book
                 GrlMedia *bookmark,
                 GError **error)
 {
-  GomResource *resource;
+  gint r;
+  sqlite3_stmt *sql_stmt = NULL;
   const gchar *title;
   const gchar *url;
   const gchar *desc;
-  const gchar *thumb;
   GTimeVal now;
-  gint64 parent_id;
+  const gchar *parent_id;
   const gchar *mime;
   gchar *date;
   guint type;
-  gint64 id;
-  gchar *str_id;
-  GError *local_error = NULL;
-  gboolean ret;
+  gchar *id;
 
   GRL_DEBUG ("store_bookmark");
 
-  str_id = (gchar *) grl_media_get_id (bookmark);
   title = grl_media_get_title (bookmark);
   url = grl_media_get_url (bookmark);
-  thumb = grl_media_get_thumbnail (bookmark);
   desc = grl_media_get_description (bookmark);
   mime = grl_media_get_mime (bookmark);
   g_get_current_time (&now);
   date = g_time_val_to_iso8601 (&now);
 
   if (!parent) {
-    parent_id = 0;
+    parent_id = "0";
   } else {
-    parent_id = g_ascii_strtoll (grl_media_get_id (GRL_MEDIA (parent)), NULL, 0);
+    parent_id = grl_media_get_id (GRL_MEDIA (parent));
   }
-  if (parent_id < 0) {
-    parent_id = 0;
+  if (!parent_id) {
+    parent_id = "0";
+  }
+
+  GRL_DEBUG ("%s", GRL_SQL_STORE_BOOKMARK);
+  r = sqlite3_prepare_v2 (bookmarks_source->priv->db,
+			  GRL_SQL_STORE_BOOKMARK,
+			  strlen (GRL_SQL_STORE_BOOKMARK),
+			  &sql_stmt, NULL);
+  if (r != SQLITE_OK) {
+    GRL_WARNING ("Failed to store bookmark '%s': %s", title,
+                 sqlite3_errmsg (bookmarks_source->priv->db));
+    *error = g_error_new (GRL_CORE_ERROR,
+                          GRL_CORE_ERROR_STORE_FAILED,
+                          _("Failed to store: %s"),
+                          sqlite3_errmsg (bookmarks_source->priv->db));
+    return;
   }
 
   GRL_DEBUG ("URL: '%s'", url);
@@ -716,67 +677,63 @@ store_bookmark (GrlBookmarksSource *book
     type = BOOKMARK_TYPE_STREAM;
   }
 
-  resource = find_resource (str_id, bookmarks_source->priv->repository);
-  if (!resource) {
-    resource = g_object_new (BOOKMARKS_TYPE_RESOURCE,
-                             "repository", bookmarks_source->priv->repository,
-                             "parent", parent_id,
-                             "type", type,
-                             NULL);
-  }
-
+  sqlite3_bind_text (sql_stmt, BOOKMARK_PARENT, parent_id, -1, SQLITE_STATIC);
+  sqlite3_bind_int (sql_stmt, BOOKMARK_TYPE, type);
   if (type == BOOKMARK_TYPE_STREAM) {
-    g_object_set (G_OBJECT (resource), "url", url, NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_URL, url, -1, SQLITE_STATIC);
     *keylist = g_list_remove (*keylist,
                               GRLKEYID_TO_POINTER (GRL_METADATA_KEY_URL));
+  } else {
+    sqlite3_bind_null (sql_stmt, BOOKMARK_URL);
   }
   if (title) {
-    g_object_set (G_OBJECT (resource), "title", title, NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_TITLE, title, -1, SQLITE_STATIC);
     *keylist = g_list_remove (*keylist,
                               GRLKEYID_TO_POINTER (GRL_METADATA_KEY_TITLE));
   } else if (url) {
-    g_object_set (G_OBJECT (resource), "title", url, NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_TITLE, url, -1, SQLITE_STATIC);
   } else {
-    g_object_set (G_OBJECT (resource), "title", "(unknown)", NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_TITLE, "(unknown)", -1, SQLITE_STATIC);
   }
   if (date) {
-    g_object_set (G_OBJECT (resource), "date", date, NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_DATE, date, -1, SQLITE_STATIC);
+  } else {
+    sqlite3_bind_null (sql_stmt, BOOKMARK_DATE);
   }
   if (mime) {
-    g_object_set (G_OBJECT (resource), "mime", mime, NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_MIME, mime, -1, SQLITE_STATIC);
     *keylist = g_list_remove (*keylist,
                               GRLKEYID_TO_POINTER (GRL_METADATA_KEY_MIME));
+  } else {
+    sqlite3_bind_null (sql_stmt, BOOKMARK_MIME);
   }
   if (desc) {
-    g_object_set (G_OBJECT (resource), "desc", desc, NULL);
+    sqlite3_bind_text (sql_stmt, BOOKMARK_DESC, desc, -1, SQLITE_STATIC);
     *keylist = g_list_remove (*keylist,
                               GRLKEYID_TO_POINTER (GRL_METADATA_KEY_DESCRIPTION));
+  } else {
+    sqlite3_bind_null (sql_stmt, BOOKMARK_DESC);
   }
-  if (thumb) {
-    g_object_set (G_OBJECT (resource), "thumbnail-url", thumb, NULL);
-    *keylist = g_list_remove (*keylist,
-                              GRLKEYID_TO_POINTER (GRL_METADATA_KEY_THUMBNAIL));
-  }
 
-  ret = gom_resource_save_sync (resource, &local_error);
-  if (!ret) {
+  while ((r = sqlite3_step (sql_stmt)) == SQLITE_BUSY);
+
+  if (r != SQLITE_DONE) {
     GRL_WARNING ("Failed to store bookmark '%s': %s", title,
-                 local_error->message);
+                 sqlite3_errmsg (bookmarks_source->priv->db));
     *error = g_error_new (GRL_CORE_ERROR,
                           GRL_CORE_ERROR_STORE_FAILED,
                           _("Failed to store: %s"),
-                          local_error->message);
-    g_error_free (local_error);
-    g_object_unref (resource);
+                          sqlite3_errmsg (bookmarks_source->priv->db));
+    sqlite3_finalize (sql_stmt);
     return;
   }
 
-  g_object_get (resource, "id", &id, NULL);
-  str_id = g_strdup_printf ("%" G_GINT64_FORMAT, id);
-  grl_media_set_id (bookmark, str_id);
-  g_free (str_id);
+  sqlite3_finalize (sql_stmt);
 
-  g_object_unref (resource);
+  id = g_strdup_printf ("%llu",
+                        sqlite3_last_insert_rowid (bookmarks_source->priv->db));
+  grl_media_set_id (bookmark, id);
+  g_free (id);
 
   if (bookmarks_source->priv->notify_changes) {
     grl_source_notify_change (GRL_SOURCE (bookmarks_source),
@@ -798,31 +755,12 @@ grl_bookmarks_source_supported_keys (Grl
                                       GRL_METADATA_KEY_URL,
                                       GRL_METADATA_KEY_CHILDCOUNT,
                                       GRL_METADATA_KEY_DESCRIPTION,
-                                      GRL_METADATA_KEY_THUMBNAIL,
                                       GRL_BOOKMARKS_KEY_BOOKMARK_TIME,
                                       NULL);
   }
   return keys;
 }
 
-static GrlCaps *
-grl_bookmarks_source_get_caps (GrlSource       *source,
-                               GrlSupportedOps  operation)
-{
-  GList *keys;
-  static GrlCaps *caps = NULL;
-
-  if (caps == NULL) {
-    caps = grl_caps_new ();
-    grl_caps_set_type_filter (caps, GRL_TYPE_FILTER_ALL);
-    keys = grl_metadata_key_list_new (GRL_METADATA_KEY_MIME, NULL);
-    grl_caps_set_key_filter (caps, keys);
-    g_list_free (keys);
-  }
-
-  return caps;
-}
-
 static void
 grl_bookmarks_source_browse (GrlSource *source,
                              GrlSourceBrowseSpec *bs)
@@ -834,7 +772,7 @@ grl_bookmarks_source_browse (GrlSource *
   GError *error = NULL;
 
   bookmarks_source = GRL_BOOKMARKS_SOURCE (source);
-  if (!bookmarks_source->priv->adapter) {
+  if (!bookmarks_source->priv->db) {
     GRL_WARNING ("Can't execute operation: no database connection.");
     error = g_error_new_literal (GRL_CORE_ERROR,
                                  GRL_CORE_ERROR_BROWSE_FAILED,
@@ -850,12 +788,12 @@ grl_bookmarks_source_browse (GrlSource *
   os->media_id = grl_media_get_id (bs->container);
   os->count = grl_operation_options_get_count (bs->options);
   os->skip = grl_operation_options_get_skip (bs->options);
-  os->type_filter = grl_operation_options_get_type_filter (bs->options);
   os->callback = bs->callback;
   os->user_data = bs->user_data;
   os->error_code = GRL_CORE_ERROR_BROWSE_FAILED;
 
   produce_bookmarks_from_category (os, os->media_id ? os->media_id : "0");
+  g_slice_free (OperationSpec, os);
 }
 
 static void
@@ -869,7 +807,7 @@ grl_bookmarks_source_search (GrlSource *
   GError *error = NULL;
 
   bookmarks_source = GRL_BOOKMARKS_SOURCE (source);
-  if (!bookmarks_source->priv->adapter) {
+  if (!bookmarks_source->priv->db) {
     GRL_WARNING ("Can't execute operation: no database connection.");
     error = g_error_new_literal (GRL_CORE_ERROR,
                                  GRL_CORE_ERROR_QUERY_FAILED,
@@ -886,7 +824,8 @@ grl_bookmarks_source_search (GrlSource *
   os->callback = ss->callback;
   os->user_data = ss->user_data;
   os->error_code = GRL_CORE_ERROR_SEARCH_FAILED;
-  produce_bookmarks_from_text (os, ss->text);
+  produce_bookmarks_by_text (os, ss->text);
+  g_slice_free (OperationSpec, os);
 }
 
 static void
@@ -900,7 +839,7 @@ grl_bookmarks_source_query (GrlSource *s
   GError *error = NULL;
 
   bookmarks_source = GRL_BOOKMARKS_SOURCE (source);
-  if (!bookmarks_source->priv->adapter) {
+  if (!bookmarks_source->priv->db) {
     GRL_WARNING ("Can't execute operation: no database connection.");
     error = g_error_new_literal (GRL_CORE_ERROR,
                                  GRL_CORE_ERROR_QUERY_FAILED,
@@ -914,11 +853,11 @@ grl_bookmarks_source_query (GrlSource *s
   os->operation_id = qs->operation_id;
   os->count = grl_operation_options_get_count (qs->options);
   os->skip = grl_operation_options_get_skip (qs->options);
-  os->type_filter = grl_operation_options_get_type_filter (qs->options);
   os->callback = qs->callback;
   os->user_data = qs->user_data;
   os->error_code = GRL_CORE_ERROR_SEARCH_FAILED;
-  produce_bookmarks_from_query (os, qs->query);
+  produce_bookmarks_by_query (os, qs->query);
+  g_slice_free (OperationSpec, os);
 }
 
 static void
@@ -943,7 +882,7 @@ static void grl_bookmarks_source_remove
   GRL_DEBUG (__FUNCTION__);
   GError *error = NULL;
   remove_bookmark (GRL_BOOKMARKS_SOURCE (rs->source),
-                   rs->media_id, rs->media, &error);
+		   rs->media_id, rs->media, &error);
   rs->callback (rs->source, rs->media, rs->user_data, error);
   g_clear_error (&error);
 }
@@ -958,7 +897,7 @@ grl_bookmarks_source_resolve (GrlSource
   GError *error = NULL;
 
   bookmarks_source = GRL_BOOKMARKS_SOURCE (source);
-  if (!bookmarks_source->priv->repository) {
+  if (!bookmarks_source->priv->db) {
     GRL_WARNING ("Can't execute operation: no database connection.");
     error = g_error_new_literal (GRL_CORE_ERROR,
                                  GRL_CORE_ERROR_RESOLVE_FAILED,
Index: grilo-plugins/configure.ac
===================================================================
--- grilo-plugins.orig/configure.ac
+++ grilo-plugins/configure.ac
@@ -617,14 +617,14 @@ AC_ARG_ENABLE(bookmarks,
                         if test "x$HAVE_XML" = "xno"; then
                            AC_MSG_ERROR([libxml-2.0 not found, install it or use --disable-bookmarks])
                         fi
-                        if test "x$HAVE_GOM" = "xno"; then
-                           AC_MSG_ERROR([gom-1.0 not found, install it or use --disable-bookmarks])
+                        if test "x$HAVE_SQLITE" = "xno"; then
+                           AC_MSG_ERROR([sqlite3 not found, install it or use --disable-bookmarks])
                         fi
                         ;;
                 esac
         ],
         [
-                if test "x$HAVE_GIO" = "xyes" -a "x$HAVE_XML" = "xyes" -a "x$HAVE_GOM" = "xyes"; then
+                if test "x$HAVE_GIO" = "xyes" -a "x$HAVE_XML" = "xyes" -a "x$HAVE_SQLITE" = "xyes"; then
                    enable_bookmarks=yes
                 else
                    enable_bookmarks=no
@@ -642,9 +642,9 @@ BOOKMARKS_PLUGIN_ID="grl-bookmarks"
 AC_SUBST(BOOKMARKS_PLUGIN_ID)
 AC_DEFINE_UNQUOTED([BOOKMARKS_PLUGIN_ID], ["$BOOKMARKS_PLUGIN_ID"], [Bookmarks plugin ID])
 
-DEPS_BOOKMARKS_CFLAGS="$DEPS_CFLAGS $GOM_CFLAGS"
+DEPS_BOOKMARKS_CFLAGS="$DEPS_CFLAGS $SQLITE_CFLAGS"
 AC_SUBST(DEPS_BOOKMARKS_CFLAGS)
-DEPS_BOOKMARKS_LIBS="$DEPS_LIBS $GOM_LIBS"
+DEPS_BOOKMARKS_LIBS="$DEPS_LIBS $SQLITE_LIBS"
 AC_SUBST(DEPS_BOOKMARKS_LIBS)
 
 # ----------------------------------------------------------
